name: CI Setup for Go # Name the workflow
on: # On event keyword
    push:
      branches: [main] # Identifying branch
    pull_request:
      branches: [main]
        
jobs: # Job to execute on event
  my-job: # This can be any name
    name: My Job
    runs-on: ubuntu-latest # Specify OS in virtual machine
    steps:
    - name: Print a greeting
      run: |
        ls
        echo Hello there! This is my first run job! # Run terminal command
        
    - name: Setup Go environment
      uses: actions/setup-go@v2.1.3
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges.
        go-version: 1.13.7 # optional        
        
    - name: Show Go version # Verify that go is installed
      run: go version # Show go version
      
    - name: Checkout our codes # Bring repo code to virtual environment
      uses: actions/checkout@v2
      
    - name: Check file system # Check virtual environment has files
      run: |
        ls
        cat calc.go #prints the content of calc.go
        
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: lowkh2/GoSchoolRemoteExample # The hidden repo i am trying to access
        path: virtualRepoFolder # Folder to save to in my virtual env
        token: ${{ secrets.GO_SECRET }} # Pass to enter remote hidden repo
        
    - name: Show hidden files
      run: |
        cd virtualRepoFolder # To access folder of interest in my virtual env
        ls
        cat myText.txt # Show content of file of interest
        cd ..
    
    - name: Install dependencies for GO
      run: |
        go get github.com/franela/goblin # Add package for Goblin testing
        go get github.com/tebeka/go2xunit # Add package for conversion       
        go test -v # Command to run go test
        go test -v | go2xunit > report.xml # Run test again and output as report.xml (to show the effect)
        ls # Verify that the report is indeed created
        cat report.xml # Show content of xml file created
        
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1 # Checkout Unit Test Reporting
      if: always() # Always do it
      with:
        files: report.xml # Make use of a file we created
        
    - if: ${{ success() }}
      name: Create Upload Directory
      run: mkdir upload
      
    - name: Prepare Documents
      run: mv report.xml ./upload
      
    - name: Prepare artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: assetDocuments
        path: upload
        
    - name: Download Content
      uses: actions/download-artifact@v2
      with:
        name: assetDocuments
          
    - if: ${{ failure() }}
      name: Create Issues Notifications
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: workflow-failed
        body: Workflow failed for commit ${{github.sha}}

    - if: always() # Always do it
      name: Email job done # Send an email to inform that job is done.
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: Github - Workflow finished for - CI Setup for Go 
        body: Job completed (${{ job.status }}) # Print job status in the email body
        to: ${{ secrets.EMAIL_TO }}
        from: ${{ secrets.EMAIL_FROM }}
